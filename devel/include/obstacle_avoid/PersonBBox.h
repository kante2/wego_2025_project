// Generated by gencpp from file obstacle_avoid/PersonBBox.msg
// DO NOT EDIT!


#ifndef OBSTACLE_AVOID_MESSAGE_PERSONBBOX_H
#define OBSTACLE_AVOID_MESSAGE_PERSONBBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace obstacle_avoid
{
template <class ContainerAllocator>
struct PersonBBox_
{
  typedef PersonBBox_<ContainerAllocator> Type;

  PersonBBox_()
    : xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)
    , confidence(0.0)  {
    }
  PersonBBox_(const ContainerAllocator& _alloc)
    : xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef float _xmin_type;
  _xmin_type xmin;

   typedef float _xmax_type;
  _xmax_type xmax;

   typedef float _ymin_type;
  _ymin_type ymin;

   typedef float _ymax_type;
  _ymax_type ymax;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::obstacle_avoid::PersonBBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_avoid::PersonBBox_<ContainerAllocator> const> ConstPtr;

}; // struct PersonBBox_

typedef ::obstacle_avoid::PersonBBox_<std::allocator<void> > PersonBBox;

typedef boost::shared_ptr< ::obstacle_avoid::PersonBBox > PersonBBoxPtr;
typedef boost::shared_ptr< ::obstacle_avoid::PersonBBox const> PersonBBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obstacle_avoid::PersonBBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obstacle_avoid::PersonBBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::obstacle_avoid::PersonBBox_<ContainerAllocator1> & lhs, const ::obstacle_avoid::PersonBBox_<ContainerAllocator2> & rhs)
{
  return lhs.xmin == rhs.xmin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymin == rhs.ymin &&
    lhs.ymax == rhs.ymax &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::obstacle_avoid::PersonBBox_<ContainerAllocator1> & lhs, const ::obstacle_avoid::PersonBBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace obstacle_avoid

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::obstacle_avoid::PersonBBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_avoid::PersonBBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_avoid::PersonBBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_avoid::PersonBBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_avoid::PersonBBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_avoid::PersonBBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obstacle_avoid::PersonBBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9d1a9332fa8b4de04d024bcae544972";
  }

  static const char* value(const ::obstacle_avoid::PersonBBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9d1a9332fa8b4deULL;
  static const uint64_t static_value2 = 0x04d024bcae544972ULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_avoid::PersonBBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obstacle_avoid/PersonBBox";
  }

  static const char* value(const ::obstacle_avoid::PersonBBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obstacle_avoid::PersonBBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 xmin\n"
"float32 xmax\n"
"float32 ymin\n"
"float32 ymax\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::obstacle_avoid::PersonBBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obstacle_avoid::PersonBBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xmin);
      stream.next(m.xmax);
      stream.next(m.ymin);
      stream.next(m.ymax);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PersonBBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_avoid::PersonBBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obstacle_avoid::PersonBBox_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "xmin: ";
    Printer<float>::stream(s, indent + "  ", v.xmin);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "xmax: ";
    Printer<float>::stream(s, indent + "  ", v.xmax);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ymin: ";
    Printer<float>::stream(s, indent + "  ", v.ymin);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ymax: ";
    Printer<float>::stream(s, indent + "  ", v.ymax);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_AVOID_MESSAGE_PERSONBBOX_H
